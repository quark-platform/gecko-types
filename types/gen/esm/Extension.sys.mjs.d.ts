declare module "resource://gre/modules/Extension.sys.mjs" {
    var ExtensionProcessCrashObserver: {
        initialized;
        _appInForeground;
        _isAndroid;
        _processSpawningDisabled;
        currentProcessChildID;
        lastCrashedProcessChildID;
        QueryInterface;
        lastCrashTimestamps;
        init();
        uninit();
        observe(subject?, topic?, data?);
        enableProcessSpawning();
        get appInForeground(): any;
        get processSpawningDisabled(): any;
    };
    export class ExtensionData {
        constructor(rootURI);
        constructAsync();
        getIsPrivileged();
        get builtinMessages();
        get logger();
        manifestError();
        manifestWarning();
        packagingError();
        packagingWarning();
        logWarning();
        logError();
        _logMessage();
        ensureNoErrors();
        getURL();
        _readDirectory();
        readJSON();
        get restrictSchemes();
        permissionsObject();
        get manifestPermissions();
        getManifestOrigins();
        get manifestOptionalPermissions();
        get activePermissions();
        shouldPromptFor();
        comparePermissions();
        intersectPermissions();
        migratePermissions();
        canUseAPIExperiment();
        canUseThemeExperiment();
        get manifestVersion();
        get persistentBackground();
        set backgroundState(state);
        get backgroundState();
        getExtensionVersionWithoutValidation();
        getLocalizedManifest();
        _getNormalizedManifest();
        initializeAddonTypeAndID();
        parseManifest();
        loadManifest();
        hasPermission();
        getAPIManager();
        localizeMessage();
        localize();
        get defaultLocale();
        get isAppProvided();
        get isHidden();
        normalizeLocaleCode();
        readLocaleFile();
        _promiseLocaleMap();
        _setupLocaleData();
        promiseLocales();
        initAllLocales();
        initLocale();
        isAllSitesPermission();
        classifyOriginPermissions();
        formatPermissionStrings();
    }
    import type { ExtensionData } from "resource://gre/modules/Extension.sys.mjs";
    export class Extension extends ExtensionData {
        constructor(addonData, startupReason, updateReason);
        set state(startupState);
        get state();
        addStartupStatePromise();
        getBootstrapScope();
        get browsingContextGroupId();
        get groupFrameLoader();
        get backgroundContext();
        on();
        off();
        once();
        emit();
        receiveMessage();
        testMessage();
        createPrincipal();
        isExtensionURL();
        checkLoadURI();
        checkLoadURL();
        promiseLocales();
        readLocaleFile();
        get manifestCacheKey();
        get temporarilyInstalled();
        saveStartupData();
        parseManifest();
        cachePermissions();
        loadManifest();
        get extensionPageCSP();
        get backgroundScripts();
        get backgroundTypeModule();
        get backgroundWorkerScript();
        get optionalPermissions();
        get privateBrowsingAllowed();
        canAccessWindow();
        canAccessContainer();
        serialize();
        serializeExtended();
        broadcast();
        setSharedData();
        getSharedData();
        initSharedData();
        updateContentScripts();
        runManifest();
        callOnClose();
        forgetOnClose();
        get builtinMessages();
        initLocale();
        clearCache();
        updatePermissions();
        startup();
        _setupStartupPermissions();
        cleanupGeneratedFile();
        shutdown();
        observe();
        get name();
        get optionalOrigins();
        get hasBrowserActionUI();
        getPreferredIcon();
    }
    import type { ExtensionData } from "resource://gre/modules/Extension.sys.mjs";
    export class Dictionary extends ExtensionData {
        constructor(addonData, startupReason);
        getBootstrapScope();
        startup();
        shutdown();
    }
    import type { ExtensionData } from "resource://gre/modules/Extension.sys.mjs";
    export class Langpack extends ExtensionData {
        constructor(addonData, startupReason);
        getBootstrapScope();
        promiseLocales();
        parseManifest();
        startup();
        shutdown();
    }
    import type { ExtensionData } from "resource://gre/modules/Extension.sys.mjs";
    export class SitePermission extends ExtensionData {
        constructor(addonData, startupReason);
        loadManifest();
        getBootstrapScope();
        getSupportedPrincipals();
        startup();
        shutdown();
    }
}