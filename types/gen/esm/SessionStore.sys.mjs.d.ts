declare module "resource://app/modules/sessionstore/SessionStore.sys.mjs" {
    var SessionStore: {
        get promiseInitialized(): any;
        get promiseAllWindowsRestored(): any;
        get canRestoreLastSession(): any;
        set canRestoreLastSession(val);
        get lastClosedObjectType(): any;
        get willAutoRestore(): any;
        init;
        getBrowserState;
        setBrowserState;
        getWindowState;
        setWindowState;
        getTabState;
        setTabState;
        isTabRestoring(aTab);
        getInternalObjectState(obj);
        duplicateTab;
        getLastClosedTabCount(aWindow);
        resetLastClosedTabCount(aWindow);
        getClosedTabCount;
        getClosedTabData;
        undoCloseTab;
        forgetClosedTab;
        getClosedWindowCount;
        getClosedWindowData;
        maybeDontRestoreTabs(aWindow);
        undoCloseWindow;
        forgetClosedWindow;
        getCustomWindowValue(aWindow, aKey);
        setCustomWindowValue(aWindow, aKey, aStringValue);
        deleteCustomWindowValue(aWindow, aKey);
        getCustomTabValue(aTab, aKey);
        setCustomTabValue(aTab, aKey, aStringValue);
        deleteCustomTabValue(aTab, aKey);
        getLazyTabValue(aTab, aKey);
        getCustomGlobalValue(aKey);
        setCustomGlobalValue(aKey, aStringValue);
        deleteCustomGlobalValue(aKey);
        persistTabAttribute;
        restoreLastSession;
        speculativeConnectOnTabHover(tab);
        getCurrentState(aUpdateAll);
        reviveCrashedTab(aTab);
        reviveAllCrashedTabs();
        updateSessionStoreFromTablistener(aBrowser, aBrowsingContext, aPermanentKey, aData);
        getSessionHistory(tab, updatedCallback);
        undoCloseById(aClosedId, aIncludePrivate);
        resetBrowserToLazyState(tab);
        maybeExitCrashedState(browser);
        isBrowserInCrashedSet(browser);
        resetNextClosedId();
        ensureInitialized(window);
        getCurrentEpoch(browser);
        isFormatVersionCompatible(version);
        keepOnlyWorthSavingTabs(aState);
        prepareToChangeRemoteness(aTab);
        finishTabRemotenessChange(aTab, aSwitchId);
    };
    var _LastSession;
}