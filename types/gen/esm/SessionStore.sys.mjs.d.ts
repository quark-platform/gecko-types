declare module "resource://app/modules/sessionstore/SessionStore.sys.mjs" {
    var SessionStore: {
        get promiseInitialized(): any;
        get promiseAllWindowsRestored(): any;
        get canRestoreLastSession(): any;
        set canRestoreLastSession(val);
        get lastClosedObjectType(): any;
        get lastClosedActions(): any;
        get LAST_ACTION_CLOSED_TAB(): any;
        get LAST_ACTION_CLOSED_WINDOW(): any;
        get willAutoRestore(): any;
        init;
        getWindows(aWindowOrOptions?);
        getWindowForTabClosedId(aClosedId?, aIncludePrivate?);
        getBrowserState;
        setBrowserState;
        getWindowState;
        setWindowState;
        getTabState;
        setTabState;
        isTabRestoring(aTab?);
        getInternalObjectState(obj?);
        duplicateTab;
        getLastClosedTabCount(aWindow?);
        resetLastClosedTabCount(aWindow?);
        getClosedTabCountForWindow;
        getClosedTabCount;
        getClosedTabCountFromClosedWindows;
        getClosedTabDataForWindow;
        getClosedTabData;
        getClosedTabDataFromClosedWindows;
        undoCloseTab;
        undoClosedTabFromClosedWindow;
        forgetClosedTab;
        forgetClosedTabById;
        forgetClosedWindowById;
        getObjectTypeForClosedId(aClosedId?);
        getWindowById;
        getClosedWindowCount;
        popLastClosedAction;
        resetLastClosedActions;
        getClosedWindowData;
        maybeDontRestoreTabs(aWindow?);
        undoCloseWindow;
        forgetClosedWindow;
        getCustomWindowValue(aWindow?, aKey?);
        setCustomWindowValue(aWindow?, aKey?, aStringValue?);
        deleteCustomWindowValue(aWindow?, aKey?);
        getCustomTabValue(aTab?, aKey?);
        setCustomTabValue(aTab?, aKey?, aStringValue?);
        deleteCustomTabValue(aTab?, aKey?);
        getLazyTabValue(aTab?, aKey?);
        getCustomGlobalValue(aKey?);
        setCustomGlobalValue(aKey?, aStringValue?);
        deleteCustomGlobalValue(aKey?);
        persistTabAttribute;
        restoreLastSession;
        speculativeConnectOnTabHover(tab?);
        getCurrentState(aUpdateAll?);
        reviveCrashedTab(aTab?);
        reviveAllCrashedTabs();
        updateSessionStoreFromTablistener(aBrowser?, aBrowsingContext?, aPermanentKey?, aData?, aForStorage?);
        getSessionHistory(tab?, updatedCallback?);
        undoCloseById(aClosedId?, aIncludePrivate?, aTargetWindow?);
        resetBrowserToLazyState(tab?);
        maybeExitCrashedState(browser?);
        isBrowserInCrashedSet(browser?);
        resetNextClosedId();
        ensureInitialized(window?);
        getCurrentEpoch(browser?);
        isFormatVersionCompatible(version?);
        keepOnlyWorthSavingTabs(aState?);
        prepareToChangeRemoteness(aTab?);
        finishTabRemotenessChange(aTab?, aSwitchId?);
    };
    var _LastSession;
}