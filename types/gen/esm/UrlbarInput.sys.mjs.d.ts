declare module "resource://app/modules/UrlbarInput.sys.mjs" {
    export class UrlbarInput {
        constructor(param0);
        formatValue();
        focus();
        select();
        setSelectionRange(selectionStart?, selectionEnd?);
        setURI(param0?, param1?, param2?, param3?, param4?);
        makeURIReadable(uri?);
        handleEvent(event?);
        handleCommand(param0?);
        handleNavigation(param0?);
        handleRevert(param0?);
        maybeHandleRevertFromPopup(anchorElement?);
        handoff(searchString?, searchEngine?, newtabSessionId?);
        pickElement(element?, event?);
        pickResult(result?, event?, param2?, param3?);
        setValueFromResult(param0?);
        setResultForCurrentValue(result?);
        _autofillFirstResult(result?);
        onFirstResult(firstResult?);
        startQuery(param0?);
        search(value?, param1?);
        setHiddenFocus();
        removeHiddenFocus(param0?);
        getSearchMode(browser?, param1?);
        setSearchMode(searchMode?, browser?);
        restoreSearchModeState();
        searchModeShortcut();
        confirmSearchMode();
        get editor();
        get focused();
        get goButton();
        get value();
        get untrimmedValue();
        set value(val);
        get lastSearchString();
        get searchMode();
        set searchMode(searchMode);
        updateLayoutBreakout();
        startLayoutExtend();
        endLayoutExtend();
        setPageProxyState(state?, updatePopupNotifications?);
        afterTabSwitchFocusChange();
        maybeConfirmSearchModeFromResult(param0?);
        observe(subject?, topic?, data?);
        getSearchSource(event?);
        _addObservers();
        _getURIFixupInfo(searchString?);
        _afterTabSelectAndFocusChange();
        _updateLayoutBreakoutDimensions();
        _setValue(val?, allowTrim?);
        _getValueFromResult(result?, param1?);
        _resetSearchState();
        _maybeAutofillPlaceholder(value?);
        _checkForRtlText(value?);
        updateTextOverflow();
        _updateUrlTooltip();
        _getSelectedValueForClipboard();
        _toggleActionOverride(event?);
        _clearActionOverride();
        _recordSearch(engine?, event?, param2?);
        _trimValue(val?);
        _maybeCanonizeURL(event?, value?);
        _autofillValue(param0?);
        _loadURL(url?, event?, openUILinkWhere?, params?, param4?, param5?);
        _whereToOpen(event?);
        _initCopyCutController();
        _initStripOnShare();
        _initPasteAndGo();
        _notifyStartNavigation(result?);
        _searchModeForResult(result?, param1?);
        _updateSearchModeUI(searchMode?);
        _maybeSelectAll();
        _on_command(event?);
        _on_blur(event?);
        _on_click(event?);
        _on_contextmenu(event?);
        _on_focus(event?);
        _on_mouseover(event?);
        _on_draggableregionleftmousedown(event?);
        _on_mousedown(event?);
        _on_input(event?);
        _on_selectionchange(event?);
        _on_select(event?);
        _on_overflow(event?);
        _on_underflow(event?);
        _on_paste(event?);
        sanitizeTextFromClipboard(clipboardData?);
        _on_scrollend(event?);
        _on_TabSelect(event?);
        _on_beforeinput(event?);
        _on_keydown(event?);
        _on_keyup(event?);
        _on_compositionstart(event?);
        _on_compositionend(event?);
        _on_dragstart(event?);
        _on_dragover(event?);
        _on_drop(event?);
        _on_customizationstarting();
        _on_aftercustomization();
    }
}