declare module "resource://gre/modules/AddonManager.sys.mjs" {
    export var AMTelemetry;
    export var AMRemoteSettings;
    export var AMBrowserExtensionsImport;
    export var AddonManagerPrivate: {
        startup();
        addonIsActive(addonId?);
        getNewSideloads();
        get browserUpdated(): any;
        registerProvider(aProvider?, aTypes?);
        unregisterProvider(aProvider?);
        getAddonTypesByProvider(aProviderName?);
        markProviderSafe(aProvider?);
        backgroundUpdateCheck();
        backgroundUpdateTimerHandler();
        addStartupChange(aType?, aID?);
        removeStartupChange(aType?, aID?);
        notifyAddonChanged(aID?, aType?, aPendingRestart?);
        updateAddonAppDisabledStates();
        updateAddonRepositoryData();
        callInstallListeners();
        callAddonListeners();
        AddonAuthor;
        AddonScreenshot;
        get BOOTSTRAP_REASONS(): any;
        setAddonStartupData(addonId?, startupData?);
        unregisterDictionaries(aDicts?);
        recordTimestamp(name?, value?);
        _simpleMeasures: {};
        recordSimpleMeasure(name?, value?);
        recordException(aModule?, aContext?, aException?);
        getSimpleMeasures();
        getTelemetryDetails();
        setTelemetryDetails(aProvider?, aDetails?);
        simpleTimer(aName?);
        recordTiming(name?, task?);
        callNoUpdateListeners(addon?, listener?, reason?, appVersion?, platformVersion?);
        get webExtensionsMinPlatformVersion(): any;
        hasUpgradeListener(aId?);
        getUpgradeListener(aId?);
        get externalExtensionLoaders(): any;
        isTemporaryInstallID(extensionId?);
        isDBLoaded();
        get databaseReady(): any;
        get finalShutdown(): any;
        overrideAddonRepository(mockRepo?);
        overrideAsyncShutdown(mockAsyncShutdown?);
    };
    export var AddonManager: {
        _installHostSource;
        _states;
        _errors;
        ERROR_TIMEOUT;
        ERROR_DOWNLOAD_ERROR;
        ERROR_PARSE_ERROR;
        ERROR_UNKNOWN_FORMAT;
        ERROR_SECURITY_ERROR;
        ERROR_CANCELLED;
        UPDATE_STATUS_NO_ERROR: number;
        UPDATE_STATUS_TIMEOUT;
        UPDATE_STATUS_DOWNLOAD_ERROR;
        UPDATE_STATUS_PARSE_ERROR;
        UPDATE_STATUS_UNKNOWN_FORMAT;
        UPDATE_STATUS_SECURITY_ERROR;
        UPDATE_STATUS_CANCELLED;
        UPDATE_WHEN_USER_REQUESTED: number;
        UPDATE_WHEN_NEW_APP_DETECTED: number;
        UPDATE_WHEN_NEW_APP_INSTALLED: number;
        UPDATE_WHEN_PERIODIC_UPDATE: number;
        UPDATE_WHEN_ADDON_INSTALLED: number;
        PENDING_NONE: number;
        PENDING_ENABLE: number;
        PENDING_DISABLE: number;
        PENDING_UNINSTALL: number;
        PENDING_INSTALL: number;
        PENDING_UPGRADE: number;
        OP_NEEDS_RESTART_NONE: number;
        OP_NEEDS_RESTART_ENABLE: number;
        OP_NEEDS_RESTART_DISABLE: number;
        OP_NEEDS_RESTART_UNINSTALL: number;
        OP_NEEDS_RESTART_INSTALL: number;
        PERM_CAN_UNINSTALL: number;
        PERM_CAN_ENABLE: number;
        PERM_CAN_DISABLE: number;
        PERM_CAN_UPGRADE: number;
        PERM_CAN_CHANGE_PRIVATEBROWSING_ACCESS: number;
        PERM_API_CAN_UNINSTALL: number;
        SCOPE_PROFILE: number;
        SCOPE_USER: number;
        SCOPE_APPLICATION: number;
        SCOPE_SYSTEM: number;
        SCOPE_TEMPORARY: number;
        SCOPE_ALL: number;
        AUTOUPDATE_DISABLE: number;
        AUTOUPDATE_DEFAULT: number;
        AUTOUPDATE_ENABLE: number;
        OPTIONS_TYPE_TAB: number;
        OPTIONS_TYPE_INLINE_BROWSER: number;
        OPTIONS_NOTIFICATION_DISPLAYED;
        OPTIONS_NOTIFICATION_HIDDEN;
        STARTUP_CHANGE_INSTALLED;
        STARTUP_CHANGE_CHANGED;
        STARTUP_CHANGE_UNINSTALLED;
        STARTUP_CHANGE_DISABLED;
        STARTUP_CHANGE_ENABLED;
        SIGNEDSTATE_NOT_REQUIRED;
        SIGNEDSTATE_BROKEN;
        SIGNEDSTATE_UNKNOWN;
        SIGNEDSTATE_MISSING: number;
        SIGNEDSTATE_PRELIMINARY: number;
        SIGNEDSTATE_SIGNED: number;
        SIGNEDSTATE_SYSTEM: number;
        SIGNEDSTATE_PRIVILEGED: number;
        get __AddonManagerInternal__(): any;
        get isReady(): any;
        get readyPromise(): any;
        init();
        stateToString(state?);
        errorToString(err?);
        getInstallSourceFromHost(host?);
        getInstallForURL(aUrl?, aOptions?);
        getInstallForFile(aFile?, aMimetype?, aTelemetryInfo?, aUseSystemLocation?);
        uninstallSystemProfileAddon(aID?);
        stageLangpacksForAppUpdate(appVersion?, platformVersion?);
        getStartupChanges(aType?);
        getAddonByID(aID?);
        getAddonBySyncGUID(aGUID?);
        getAddonsByIDs(aIDs?);
        getAddonsByTypes(aTypes?);
        getActiveAddons(aTypes?);
        getAllAddons();
        getInstallsByTypes(aTypes?);
        getAllInstalls();
        isInstallEnabled(aType?);
        isInstallAllowed(aType?, aInstallingPrincipal?);
        installSitePermsAddonFromWebpage(aBrowser?, aInstallingPrincipal?, aPermission?);
        installAddonFromWebpage(aType?, aBrowser?, aInstallingPrincipal?, aInstall?, details?);
        installAddonFromAOM(aBrowser?, aUri?, aInstall?);
        installTemporaryAddon(aDirectory?);
        installBuiltinAddon(aBase?);
        maybeInstallBuiltinAddon(aID?, aVersion?, aBase?);
        addManagerListener(aListener?);
        removeManagerListener(aListener?);
        addInstallListener(aListener?);
        removeInstallListener(aListener?);
        getUpgradeListener(aId?);
        addUpgradeListener(aInstanceID?, aCallback?);
        removeUpgradeListener(aInstanceID?);
        addExternalExtensionLoader(loader?);
        addAddonListener(aListener?);
        removeAddonListener(aListener?);
        hasAddonType(addonType?);
        hasProvider(name?);
        shouldAutoUpdate(aAddon?);
        get checkCompatibility(): any;
        set checkCompatibility(aValue);
        get strictCompatibility(): any;
        set strictCompatibility(aValue);
        get checkUpdateSecurityDefault(): any;
        get checkUpdateSecurity(): any;
        set checkUpdateSecurity(aValue);
        get updateEnabled(): any;
        set updateEnabled(aValue);
        get autoUpdateDefault(): any;
        set autoUpdateDefault(aValue);
        escapeAddonURI(aAddon?, aUri?, aAppVersion?);
        getPreferredIconURL(aAddon?, aSize?, aWindow?);
        get webAPI(): any;
        get beforeShutdown(): any;
    };
}